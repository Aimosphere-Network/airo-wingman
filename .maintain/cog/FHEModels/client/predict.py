import os
import subprocess
import numpy as np
from cog import BasePredictor, Input
from concrete.ml.deployment import FHEModelClient


# standard place and file name to store evaluation key
keys_file = "serialized_evaluation_keys.ekl"


class Predictor(BasePredictor):
    def setup(self):
        # Generate client from client.zip file (generated while model-owner builds circuit)
        # client.zip is generated by dev (model owner) using dev.py script
        # if this does not work it os probably because the file was generated
        # in a different OS from this machine's
        self.client = FHEModelClient("")

        """Evaluation key generation"""
        
        # Create private and evaluation keys
        eval_key = self.client.get_serialized_evaluation_keys()

        # Export keys into file
        with open(keys_file, "wb") as f: f.write(eval_key)
    

    def predict(self, 
                features: str = Input(description="plain-text features file"),
                server_address: str = Input(description="server's remote host address")
                ) -> str:

        """Input encryption with evaluation key"""
        
        # Load features from file
        with open(features, "rb") as f: input_data = f.read()

        # Encrypt features individually
        enc_inputs = []
        for i in input_data:
            e_i = self.client.quantize_encrypt_serialize(i.reshape(1, -1))
            enc_inputs.append(e_i)

        # Export encrypted features to file
        base_name, ext = os.path.splitext(features) 
        enc_inputs_file = f"{base_name}_enc{ext}"
        with open(enc_inputs_file, "wb") as f: f.write(enc_inputs)

        # """Send request"""

        # # Cog command to execute prediction on server
        # curl_command = ['curl', f'http://{server_address}/predictions', '-i', '-X', 'POST', '-H', 'Content-Type: application/json', 
        #                 '-d', '{"input": {"eval_key_file": {keys_file}, "enc_input_file": {enc_inputs_file}}']

        # # Execute curl command
        # message = subprocess.run(curl_command, capture_output=True, text=True)

        # # Remove intermediary encrypted input file
        # os.remove(enc_inputs_file)

        # """Receive response"""

        # # Response is path for results file in server
        # enc_output_file = message.stdout

        # # Download output file from the server
        # download_command = [
        #         'curl', '-o', 'output.csv', f'http://server:5001{enc_output_file}']

        # subprocess.run(download_command)


        """Output decryption with evaluation key"""

        # Load results from file
        with open(enc_output_file, "rb") as f: enc_output = f.read()

        # Decrypt results individually
        output_data = []
        for e_o in enc_output:
            o = np.argmax(self.client.deserialize_decrypt_dequantize(e_o), axis=1)
            output_data.append(o)

        # Remove intermediary encrypted input file
        os.remove(enc_output_file)

        # Print results
        print(output_data)

        # Print groud truths for comparisson
        # print(joblib.load(os.path.join("ground_truths", features)))