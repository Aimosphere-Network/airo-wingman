
import argparse
import numpy as np
import joblib
from concrete.ml.deployment import FHEModelClient


def main():
    # Create an ArgumentParser object
    parser = argparse.ArgumentParser(
        description="Client python script.")

    # Add arguments (flags)
    parser.add_argument('--input', '-i', type=str, required=True, 
                        help='Path to input file. csv or other plain-text for encrypt function, enc/bin for decrypt function')
    parser.add_argument('--function', '-f', type=str, required=True, help='encrypt or decrypt. Encrypt returns evaluation key and encrypted prediction request. Decrypt returns decrypted prediction result.')

    # Parse the arguments
    args = parser.parse_args()

    # Access the arguments
    input_file = args.input
    function = args.function

    # Generate client from client.zip file (generated while model-owner builds circuit)
    # client.zip is generated by dev (model owner) using dev.py script
    # if this does not work it os probably because the file was generated
    # in a different OS from this machine's
    client = FHEModelClient("")

    """Evaluation key generation"""
                
    # Create private and evaluation keys
    eval_key = client.get_serialized_evaluation_keys()

    # Export keys into file
    # standard place and file name to store evaluation key
    # keys_file = "serialized_evaluation_keys.ekl"
    # with open(keys_file, "wb") as f: f.write(eval_key)
   

    if function == "encrypt":
        # Load input from file
        input_data = joblib.load(input_file)

        """Input encryption with evaluation key"""
        # Encrypt features individually
        enc_inputs = []
        for i in input_data:
            e_i = client.quantize_encrypt_serialize(i.reshape(1, -1))
            enc_inputs.append(e_i)
        
        ## Export encrypted features to file
        #base_name, ext = os.path.splitext(input_file) 
        #enc_inputs_file = f"{base_name}.enc"
        #with open(enc_inputs_file, "wb") as f: f.write(enc_inputs)

        #print(eval_key, enc_inputs)
        return eval_key, enc_inputs
    
    elif function == "decrypt":
        # Load input from file
        with open(input_file, "rb") as f: input_data = f.read()

        """Output decryption with evaluation key"""

        # Decrypt results individually
        dec_inputs = []
        for e_i in input_data:
            i = np.argmax(client.deserialize_decrypt_dequantize(e_i), axis=1)
            dec_inputs.append(i)

        print(dec_inputs)
        return dec_inputs

    
if __name__ == "__main__":
    main()