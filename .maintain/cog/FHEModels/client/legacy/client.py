import os
import sys
import subprocess
import numpy as np
import joblib
from concrete.ml.deployment import FHEModelClient


# standard place and file name to store evaluation key
keys_file = "serialized_evaluation_keys.ekl"

features = sys.argv[1]
server_address = sys.argv[2]

# Generate client from client.zip file (generated while model-owner builds circuit)
# client.zip is generated by dev (model owner) using dev.py script
# if this does not work it os probably because the file was generated
# in a different OS from this machine's
client = FHEModelClient("")

"""Evaluation key generation"""
        
# Create private and evaluation keys
eval_key = client.get_serialized_evaluation_keys()

# Export keys into file
with open(keys_file, "wb") as f: f.write(eval_key)


"""Input encryption with evaluation key"""
        
# Load features from file
#with open(features, "rb") as f: input_data = f.read()
input_data = joblib.load(features)

# Encrypt features individually
enc_inputs = []
for i in input_data:
    e_i = client.quantize_encrypt_serialize(i.reshape(1, -1))
    enc_inputs.append(e_i)

# Export encrypted features to file
base_name, ext = os.path.splitext(features) 
enc_inputs_file = f"{base_name}_enc{ext}"
joblib.dump(enc_inputs, enc_inputs_file)

"""Send request"""

# Cog command to execute prediction on server
curl_command = ['curl', 'http://server:5001/predictions', '-i', '-X', 'POST', '-H', 'Content-Type: application/json', 
                '-d', '{"input": {"eval_key_file": {keys_file}, "enc_input_file": {enc_inputs_file}}']

# Execute curl command
message = subprocess.run(curl_command, capture_output=True, text=True)

# Remove intermediary encrypted input file
os.remove(enc_inputs_file)

"""Receive response"""

# Response is path for results file in server
enc_output_file = message.stdout

# Download output file from the server
download_command = [
        'curl', '-o', 'output.csv', f'http://server:5001{enc_output_file}']

subprocess.run(download_command)

# Load results from file
with open(enc_output_file, "rb") as f: enc_output = f.read()

"""Output decryption with evaluation key"""

# Decrypt results individually
output_data = []
for e_o in enc_output:
    o = np.argmax(client.deserialize_decrypt_dequantize(e_o), axis=1)
    output_data.append(o)

# Remove intermediary encrypted input file
os.remove(enc_output_file)

# Print results
print(output_data)

        # Print groud truths for comparisson
        # print(joblib.load(os.path.join("ground_truths", features)))

# # Create client object to manage keys
# client = FHEModelClient(fhe_files_dir, key_dir=keys_dir)

# # Create private and evaluation keys
# eval_key = client.get_serialized_evaluation_keys()

# # Export keys
# with open(keys_dir + keys_file, "wb") as f: f.write(eval_key)

# # Load features from .csv file
# input_data = joblib.load(os.path.join(test_data_dir, features))

# # Encrypt features
# enc_inputs = []
# for i in input_data:
#     e_i = client.quantize_encrypt_serialize(i.reshape(1, -1))
#     enc_inputs.append(e_i)

# # Export encrypted features
# enc_inputs_file = os.path.join(enc_test_data_dir, features)
# if not os.path.exists(enc_test_data_dir): 
#     os.mkdir(enc_test_data_dir)
# joblib.dump(enc_inputs, enc_inputs_file)

# # Call cog 
# call = subprocess.run(['cog', 'predict', 
#                     '-i', f'eval_key_dir=@{keys_dir}/{keys_file}', 
#                     '-i', f'enc_input_file=@{enc_inputs_file}'], 
#                     capture_output=True, text=True)
# print(call)

# # Decrypt results
# enc_output = joblib.load(enc_output_file)

# output_data = []
# for e_o in enc_output:
#     o = np.argmax(client.deserialize_decrypt_dequantize(e_o), axis=1)
#     output_data.append(o)

# print(output_data)
# print(joblib.load(os.path.join(ground_truths_dir, features)))